events {}

http {

	include mime.types;

	server {

		listen 80;
		server_name 172.31.21.84;

		root /sites/demo;

		# redirect example
		# location /logo {

		# 	return 307 /thumb.png;
		# }

		# a example of rewrite
		# the regex ^ = starting with /user and \w+ = more than one word character and with the second argument being the new URI to rewrite this to /greet
		# rewrite ^/user/\w+ /greet;

		# IMPORTANT: when a URI is rewritten, it also gets re evaluated by Nginx as a completely new request, meaning at this point here the rewritten greet URI starts right from the top again and will get re evaluated again
		# the re evaluation makes rewrites very powerful, but also requires more system resources than say a return, just something to keep in mind when creating rewrite rules.

		# location /greet {

		# 	return 200 "Hello User!";
		# }
		
		# another important and powerful feature of rewrite is the ability to capture certain parts of the original URI using standard regular expression capture groups.
		# for example, let's say we want to capture the user name this word character section of the regular expression -> "\w+", simply wrap that part in braces like so -> "(\w+)", which being the first capture group in this
		# URI can be accessed as -> $1, should we have had a second capture group like this? -> (\w+)/(something), We could have accessed that value as dollar sign two -> $2:

		# so let's see how it goes
		# rewrite ^/user/(\w+)/(something) /greet/$1 $2;

		# so with this variant, we are now requesting /user/john as we did in the browser and then rewriting that to /greet/john as that will be the value of this capture group.
		rewrite ^/user/(\w+) /greet/$1 last;

		# the last part of rewrites I'm going to cover is passing optional flags, or one in particular, the last flag to demonstrate I'll create another rewrite here, this time matching /greet/john and rewriting it
		# to thumb.png, the demo site image meaning that if we now request /user/john this first rewrite will match it, rewrite it to /greet/john and then have it re-evaluated where it will then match the second rewrite
		# and again be rewritten to thumb.png and finally served as thumb.png
		rewrite ^/greet/john /thumb.png;

		# now, what the "last" flag allows us to do is essentially tell Nginx not to allow a URI to be rewritten anymore...On the first rewrite add -> "last". So still re-evaluate the new URI after the rewrite, but
		# make sure this is the last time it gets rewritten, meaning it should skip over the second rewrite, example:
		# rewrite ^/user/(\w+) /greet/$1 last;

		location /greet {

			return 200 "Hello User!";
		}

		# we can test this by creating an exact match location specially for /greet/john, meaning any other user will be matched on the standard prefix match and only John on the exact match.
		location = /greet/john {

			return 200 "Hello John!";
		}
	}
}