# PS1="${debian_chroot:+($debian_chroot)}\[\033[01;34m\]\W \[\033[32m\]\$\[\033[00m\] "

-*- Section 1 - Overview

What is NGINX?

https://www.nginx.com/resources/glossary/nginx/


C10k problem

https://en.wikipedia.org/wiki/C10k_problem


Google Trends

https://trends.google.com/trends/explore?date=all&q=nginx

Question 1:
How does Apache and Nginx handle incoming requests differently?
Answer: Nginx interprets incoming requests as URI locations whereas Apache prefers to interpret requests as filesystem locations.


-*- Section 2: Installation

4. Server Overview

-  Where to launch and do the labs?

AWS

https://aws.amazon.com/

Digital Ocean

https://www.digitalocean.com/


- SSH App's to work with files on local machine

SSH App: Transmit

https://panic.com/transmit/

SSH App: Cyberduck

https://cyberduck.io/

SSH App: Filezilla

https://filezilla-project.org/



5. Installing with a Package Manager

EPEL Repo

https://docs.fedoraproject.org/en-US/epel/

apt-get update

apt-get install nginx

# process command, all uses, x - process
ps aux | grep nginx

# to see our nginx in the browser
ifconfig

# if ifconfig are not installed
apt install net-tools

# to check the public ip of ec2 instance from inside
curl http://checkip.amazonaws.com

# nginx directory content
ls -l /etc/nginx/


6. Building Nginx from Source & Adding Modules

# Nginx Downloads
http://nginx.org/en/download.html

# Configuration Options
http://nginx.org/en/docs/configure.html


# Download the nginx (In this course, we are using nginx-1.25.1 version)
wget http://nginx.org/download/nginx-1.25.1.tar.gz

# Extract the tar
tar -zxvf nginx-1.25.1.tar.gz

# Entry in directory
cd nginx-1.25.1

# Now we need to configure source code from 0
./configure

# We get a error
checking for OS
 + Linux 5.19.0-1025-aws x86_64
checking for C compiler ... not found

./configure: error: C compiler cc is not found

# We need to install build-essential
apt-get install build-essential

# Now we test again
./configure

# We get a new error
./configure: error: the HTTP rewrite module requires the 'PCRE library'.
You can either disable the module by using --without-http_rewrite_module
option, or install the PCRE library into the system, or build the PCRE library
statically from the source with nginx by using --with-pcre=<path> option.

# So, we still need a packages/libraries
# Obs: Sometimes we need to find the libraries one by one
apt-get install libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev

# Run ./configure again
./configure

Configuration summary
  + using system PCRE library
  + OpenSSL library is not used
  + using system zlib library

  nginx path prefix: "/usr/local/nginx"
  nginx binary file: "/usr/local/nginx/sbin/nginx"
  nginx modules path: "/usr/local/nginx/modules"
  nginx configuration prefix: "/usr/local/nginx/conf"
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx/logs/nginx.pid"
  nginx error log file: "/usr/local/nginx/logs/error.log"
  nginx http access log file: "/usr/local/nginx/logs/access.log"
  nginx http client request body temporary files: "client_body_temp"
  nginx http proxy temporary files: "proxy_temp"
  nginx http fastcgi temporary files: "fastcgi_temp"
  nginx http uwsgi temporary files: "uwsgi_temp"
  nginx http scgi temporary files: "scgi_temp"


# Agora podemos continuar e compilar o código fonte
# Para vermos todas as configurações disponíveis
./configure --help

# Obs: Só veremos as flags, para ter mais informações do que cada uma faz podemos pesquisar em nginx.org
nginx.org > documentation > Building nginx from Sources
https://nginx.org/en/docs/configure.html # Aqui podemos ter informações detalhadas de cada uma das configurações

# Lets reconfigure the source and set some common flags
./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
                                       --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid


# This is a simple configuration, but of course the absolute main benefit of building nginx from source is the ability
# to add custom modules or essentially extend the standard nginx functionality, something you cannot do using package manager

# Exists two types of nginx modules....Bundle Modules and 3rd Party Modules

# To see more about modules on the documentation...
https://nginx.org/en/docs/ # then scroll down till 'Modules reference'

# Let see one module from this reference...
https://nginx.org/en/docs/http/ngx_http_v2_module.html
# We can see that here we have all isntruction and the flag to install this module

# Lets install --with-http_ssl_module only
./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \
                                       --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid \
                                       --with-http_ssl_module

# Now we can compile this configuration by runnning 'make'
make

# After compile, we can install this configuration compiled by runnning 'make install'
make install

# Check the configuration files exist in that location, we configured
ls -l /etc/nginx/

total 92
drwxr-xr-x 2 root root 4096 May 30 17:31 conf.d
-rw-r--r-- 1 root root 1125 May 30 17:31 fastcgi.conf
-rw-r--r-- 1 root root 1077 Aug 12 16:45 fastcgi.conf.default
-rw-r--r-- 1 root root 1055 May 30 17:31 fastcgi_params
-rw-r--r-- 1 root root 1007 Aug 12 16:45 fastcgi_params.default
-rw-r--r-- 1 root root 2837 Aug 12 16:45 koi-utf
-rw-r--r-- 1 root root 2223 Aug 12 16:45 koi-win
-rw-r--r-- 1 root root 3957 May 30 17:31 mime.types
-rw-r--r-- 1 root root 5349 Aug 12 16:45 mime.types.default
drwxr-xr-x 2 root root 4096 May 30 17:31 modules-available
drwxr-xr-x 2 root root 4096 Aug 12 15:36 modules-enabled
-rw-r--r-- 1 root root 1447 May 30 17:31 nginx.conf
-rw-r--r-- 1 root root 2656 Aug 12 16:45 nginx.conf.default
-rw-r--r-- 1 root root  180 May 30 17:31 proxy_params
-rw-r--r-- 1 root root  636 May 30 17:31 scgi_params
-rw-r--r-- 1 root root  636 Aug 12 16:45 scgi_params.default
drwxr-xr-x 2 root root 4096 Aug 12 15:36 sites-available
drwxr-xr-x 2 root root 4096 Aug 12 15:36 sites-enabled
drwxr-xr-x 2 root root 4096 Aug 12 15:36 snippets
-rw-r--r-- 1 root root  664 May 30 17:31 uwsgi_params
-rw-r--r-- 1 root root  664 Aug 12 16:45 uwsgi_params.default
-rw-r--r-- 1 root root 3610 Aug 12 16:45 win-utf

# So we should now have the nginx executable available as well...
# Tested by getting the installed nginx version
nginx -V

nginx version: nginx/1.18.0 (Ubuntu)
built with OpenSSL 3.0.2 15 Mar 2022
TLS SNI support enabled
configure arguments: --with-cc-opt='-g -O2 -ffile-prefix-map=/build/nginx-zctdR4/nginx-1.18.0=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -flto=auto -Wl,-z,relro -Wl,-z,now -fPIC' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-compat --with-debug --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --add-dynamic-module=/build/nginx-zctdR4/nginx-1.18.0/debian/modules/http-geoip2 --with-http_addition_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_sub_module

# We can see nginx runnning
root@ip-172-31-21-84:/home/ubuntu/nginx-1.25.1# ps aux | grep nginx
root        6162  0.0  0.0  55208  1684 ?        Ss   16:21   0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
www-data    6164  0.0  0.2  55840  5436 ?        S    16:21   0:00 nginx: worker process
www-data    6165  0.0  0.2  55840  5436 ?        S    16:21   0:00 nginx: worker process
root       11344  0.0  0.1   7004  2252 pts/1    R+   16:50   0:00 grep --color=auto nginx



7. Adding an NGINX Service

- sytemd

https://www.freedesktop.org/wiki/Software/systemd/


- NGINX systemd service file

https://www.nginx.com/resources/wiki/start/topics/examples/systemd/


# to verify if nginx is running
ps aux | grep nginx

# to see the commands available to manage nginx
nginx -h

Options:
  -?,-h         : this help
  -v            : show version and exit
  -V            : show version and configure options then exit
  -t            : test configuration and exit
  -T            : test configuration, dump it and exit
  -q            : suppress non-error messages during configuration testing
  -s signal     : send signal to a master process: stop, quit, reopen, reload
  -p prefix     : set prefix path (default: /usr/share/nginx/)
  -c filename   : set configuration file (default: /etc/nginx/nginx.conf)
  -g directives : set global directives out of configuration file

# one example of command that we can run is "stop signal"
nginx -s stop

# let's add that systemd service
# to enable the service, we're going to gave to add a small script which being the same across operating systems
# We can simply copy from the Nginx website

- NGINX Init Scripts

https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/

Systemd¶
https://www.nginx.com/resources/wiki/start/topics/examples/systemd/

Save this file as /lib/systemd/system/nginx.service

[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target

# let's start nginx using the systemd this time
systemctl start nginx

# to enable nginx start on boot 
systemctl enable nginx

"Synchronizing state of nginx.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable nginx"

# reboot the machine to test
reboot

# access the machine and verify if the auto inicialization is working
systemctl status nginx


8. Nginx for Windows

- NGINX Docs: Windows

http://nginx.org/en/docs/windows.html

Question 1:
Which is the main advantage of installing Nginx via source?
Answer: It allows complete configuration of the install, including the addition of extra modules.

-*- Section 3: Configuration


9. Understanging Configuration Terms

The two main configuration terms is context and directive

- Directive

Directives is specific configuration options that get set in the configuration files and consist of a name and a
value.


- Context

Context is sections within the configuration where directives can be set for that given context.

Essentially, contexts is the same as scope and like scope, context are also nested and inherit from their parents
with the topmost context simply being the configuration file itself.


10. Creating a Virtual Host

Class content:

demo-site.zip (course folder)

Bootstrap Demo Site (Alternative)
https://getbootstrap.com/

01 Creating a Virtual Host.conf (course folder)

# after configure nginx, we need to reload it / reload better than restart to prevent downtime
systemctl reload nginx

# if you want to test the nginx configuration in case to use restart and then it dont come up again
nginx -t

# to copy a file from our PC to an EC2 instance
scp -i <path_to_pem_file> <local_file_path> <username>@<EC2_instance_public_DNS>:<remote_file_path>
# if you want to copy a directory
scp -r -i ...


# to get file types, css for example
curl -I http://instance_ip/style.css

HTTP/1.1 200 OK
Server: nginx/1.18.0 (Ubuntu)
Date: Wed, 06 Sep 2023 00:44:16 GMT
Content-Type: text/css
Content-Length: 980
Last-Modified: Fri, 01 Sep 2023 00:09:24 GMT
Connection: keep-alive
ETag: "64f12bb4-3d4"
Accept-Ranges: bytes


11. Location Blocks

It's important to understand the order of priority in which Nginx matches requests...

1 - Exact Match                     =       uri
2 - Preferential Prefix Match       ^~      uri
3 - REGEX Match                     ~*      uri
4 - Prefix Match                            uri


12. Variables

NGINX Docs: Variables
http://nginx.org/en/docs/varindex.html

We have two types of variables

Configuration Variables and NGINX Module Variables

On this example we can see some ways to use variables
if we use the ec2 dns and look the path /inspect in the browser, we can see the $host, #uri and $args value
http://dns-or-ip/inspect... 

In this example we get the response...

ec2-IP.compute-1.amazonaws.com
/inspect

location /inspect {

  return 200 "$host\n$uri\n$args";
}

We dont see any other value than $host and $uri because we didn't pass any args, so, to do that...

http://dns-or-public-ip/inspect?name=marlon

them, we can see the following result on the browser...

ec2-IP.compute-1.amazonaws.com
/inspect
name=marlon

Also, we can use any variable with prefix $arg_, so after the underscore, we can use the variable name, like...


return 200 "Name: $arg_name";

In the browser...

http://ec2-IP.compute-1.amazonaws.com/inspect?name=marlon

the result...

Name: marlon

We can use conditionals too...

Obs: We gonna to study conditionals, but, the conditionals use in nginx inside location contexts is highly 
discouraged, as this can lead to a unexpected berravior...

Obs: The technicalities is outside of the scope that we can cover here...But if you like to read more on the subject
the following link has a very detailed explanation in the list and resources...

Article: IF is Evil
https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/

But lets following with a example of "if"...

# Check static API key
# look the space between the if and () that is necessary for the syntax to be valid...
if ( @arg_apikey != 1234 ) {
  return 401 "Incorrect API Key";
}

Now, if we try to access the website without the apikey value...

Incorrect API Key

We need to pass http://ec2-IP.compute-1.amazonaws.com/?apikey=1234 to see the "nginx website"


13. Rewrites & Redirects

- HTTP Status Code Reference
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

# just a simple explanation about rewrite and redirect....the redirect simply tells the client performing the request where to go. A rewrite, on the other hand, mutates the URI internally.


14. Try Files & Named Locations

# Look at 05+Try+Files+&+Named+Locations in the files

15. Logging 

- NGINX Docs: error_log
https://nginx.org/en/docs/ngx_core_module.html#error_log

- NGINX Docs: access_log
https://nginx.org/en/docs/http/ngx_http_log_module.html

- Article: Configuring Logging
https://docs.nginx.com/nginx/admin-guide/monitoring/logging/


16. Inheritance & Directive types

# Look at 07+Inheritince+&+Directive+Types in the files


17. PHP Processing

- Understanding and Implementing FastCGI Proxying in Nginx
https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx


18. Worker Processes

# Look at 09+Worker+Processes in the files


nezzonarcizo@localhost:~$ ulimit -n # Maximo de conexões (worker_connections) possíveis que cada worker_processes pode ter
1024
nezzonarcizo@localhost:~$ nproc # Número de CPUs para se basear no máximos de worker_processes podemos ter
12
nezzonarcizo@localhost:~$ lscpu # Informações mais detalhadas sobre CPU
Architecture:                       x86_64
CPU op-mode(s):                     32-bit, 64-bit
Byte Order:                         Little Endian
Address sizes:                      48 bits physical, 48 bits virtual
CPU(s):                             12 # Podemos encontrar o mesmo valor aqui
On-line CPU(s) list:                0-11
Thread(s) per core:                 2
Core(s) per socket:                 6
Socket(s):                          1
Vendor ID:                          AuthenticAMD
CPU family:                         23
Model:                              96
Model name:                         AMD Ryzen 5 4600H with Radeon Graphics
Stepping:                           1
CPU MHz:                            2994.281
BogoMIPS:                           5988.56
Virtualization:                     AMD-V
Hypervisor vendor:                  Microsoft
Virtualization type:                full
L1d cache:                          192 KiB
L1i cache:                          192 KiB
L2 cache:                           3 MiB
L3 cache:                           4 MiB
Vulnerability Gather data sampling: Not affected
Vulnerability Itlb multihit:        Not affected
Vulnerability L1tf:                 Not affected
Vulnerability Mds:                  Not affected
Vulnerability Meltdown:             Not affected
Vulnerability Mmio stale data:      Not affected
Vulnerability Retbleed:             Mitigation; untrained return thunk; SMT enabled with STIBP protection
Vulnerability Spec rstack overflow: Mitigation; safe RET
Vulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl and seccomp
Vulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization
Vulnerability Spectre v2:           Mitigation; Retpolines, IBPB conditional, STIBP always-on, RSB filling, PBRS
                                    B-eIBRS Not affected
Vulnerability Srbds:                Not affected
Vulnerability Tsx async abort:      Not affected
Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clfl
                                    ush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm consta
                                    nt_tsc rep_good nopl tsc_reliable nonstop_tsc cpuid extd_apicid pni pclmulqd
                                    q ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hyperv
                                    isor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch o
                                    svw topoext perfctr_core ssbd ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 sme
                                    p bmi2 rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 clzero
                                     xsaveerptr arat npt nrip_save tsc_scale vmcb_clean flushbyasid decodeassist
                                    s pausefilter pfthreshold v_vmsave_vmload umip rdpid


19. Buffers & Timeouts

- NGINX Docs: Configuration file measurement units
https://nginx.org/en/docs/syntax.html

# Look at 10+Buffers+&+Timeouts in the files


20. Adding Dynamic Modules

- NGINX Docs: Module ngx_http_image_filter_module
https://nginx.org/en/docs/http/ngx_http_image_filter_module.html

# Look at 11+Adding+Dynamic+Modules in the files



-*- Section 4: Performance


21. Headers & Expires

# Look at 12+Headers+&+Expires in the files


22. Compressed Responses with gzip

- NGINX Docs: Module ngx_http_gzip_module
https://nginx.org/en/docs/http/ngx_http_gzip_module.html

# Look at 13+Compressed+Responses+with+gzip in the files

23. FastCGI Cache

- NGINX Docs: Module ngx_http_fastcgi_module
https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html

- Apache Bench
http://httpd.apache.org/docs/2.4/programs/ab.html

# Look at 14+FastCGI+Cache in the files

24. HTTP2

- How To Create a Self-Signed SSL Certificate for Nginx in Ubuntu 16.04
https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04

# Look at 15+HTTP2 in the files

25. Server Push

- Article: Introducing HTTP/2 Server Push with NGINX 1.13.9
https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/

- Nghttp2: HTTP/2 C Library
https://nghttp2.org/

# Look at 16+Server+Push in the files


-*- Section 5: Security

26. HTTPS (SSL)

- Wikipedia: Diffie-Hellman key exchange
https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange

- Article: Algorithms Explained: Diffie-Hellman
https://hackernoon.com/algorithms-explained-diffie-hellman-1034210d5100

# Look at 17+HTTPS+(SSL) in the files


27. Rate Limiting

- Siege: Load Testing Tool
https://www.joedog.org/siege-home/

- Article: NGINX rate-limiting in a nutshell
https://www.freecodecamp.org/news/nginx-rate-limiting-in-a-nutshell-128fe9e0126c

- Article: Rate Limiting with NGINX and NGINX Plus
https://www.nginx.com/blog/rate-limiting-nginx/

# Look at 18+Rate+Limiting in the files


28. Basic Auth

# Look at 19+Basic+Auth in the files


29. Hardening Nginx

# Look at 20+Hardening+Nginx in the files


30. Let's Encrypt - SSL Certificates

- Let's Encrypt
https://letsencrypt.org/


- Certbot
https://certbot.eff.org/


- Let's Encrypt - 90 Day Lifetime
https://letsencrypt.org/2015/11/09/why-90-days.html


- Certbot Docs
https://eff-certbot.readthedocs.io/en/latest/


- An Introduction to Let's Encrypt - Digital Ocean
https://www.digitalocean.com/community/tutorials/an-introduction-to-let-s-encrypt



-*- Section 6: Reverse Proxy & Load Balancing


31. Prerequisites

- PHP Built-in web server
https://www.php.net/manual/en/features.commandline.webserver.php

- List of static command line servers. - One liners
https://gist.github.com/willurd/5720255

32. Reverse Proxy

- NGINX Reverse Proxy Guide
https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/

- ngx_http_proxy_module Documentation
https://nginx.org/en/docs/http/ngx_http_proxy_module.html


33. Load Balancer

- Using nginx as HTTP load balancer
https://nginx.org/en/docs/http/load_balancing.html

- NGINX Load Balancing Guide
https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/

- ngx_http_upstream_module Documentation
https://nginx.org/en/docs/http/ngx_http_upstream_module.html


34. Load Balancer Options


35. Documentation & Resources

- NGINX Documentation
https://nginx.org/en/docs/

- Common Pitfalls
https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/

- Digital Ocean Tutorials
https://www.digitalocean.com/community/tutorials/nginx-essentials-installation-and-configuration-troubleshooting

- Digital Ocean Nginx Tool
https://www.digitalocean.com/community/tools/nginx?global.app.lang=ptBR

- WordPress Nginx
https://developer.wordpress.org/advanced-administration/server/web-server/nginx/

- Nginx Resources
https://github.com/fcambus/nginx-resources


-*- Section 7: Outro

36. Bonus Lecture: Feedback & Stackacademy.tv Courses

***


-*- Section 8: Archive


37. Adding an NGINX Init Service

- Nginx Ubuntu Init Script
https://github.com/JasonGiedymin/nginx-init-ubuntu

- NGINX Init Scripts
https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/


38. GeoIP

- GeoIP Downloads
https://dev.maxmind.com/geoip/release-notes/2018#discontinuation-of-the-geolite-legacy-databases

- Nginx GeoIP Module
https://nginx.org/en/docs/http/ngx_http_geoip_module.html


39. Video streaming

- Nginx MP4 Module
https://nginx.org/en/docs/http/ngx_http_mp4_module.html